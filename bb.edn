{:tasks
 {:requires ([babashka.fs :as fs])
  ;; Helpers
  -exists? (fn -exists? [path]
             (let [ret (fs/exists? path)]
               (when ret (println "Path" (str path) "already installed"))
               ret))
  -github-repo (fn -github-repo [gh-repo]
                 (str "git@github.com:" gh-repo ".git"))
  ;; Tasks
  hammerspoon-repo {:doc "Install cldwalker/hammerspoon-files"
                    :depends [-exists? -github-repo]
                    :task (let [path (fs/path (System/getenv "HOME") ".hammerspoon")]
                            (when-not (-exists? path)
                              (shell (format "git clone %s %s"
                                             (-github-repo "cldwalker/hammerspoon-files")
                                             path))))}

  keyboard-repo {:doc "Install cldwalker/keyboard"
                 :depends [-exists? -github-repo hammerspoon-repo]
                 :task (let [path (fs/path (System/getenv "HOME") ".keyboard")]
                         (when-not (-exists? path)
                           (shell (format "git clone %s %s"
                                          (-github-repo "cldwalker/keyboard")
                                          path))
                           (shell {:dir path} "script/setup")))}

  atomfiles-repo {:doc "Install cldwalker/atomfiles"
                  :depends [-exists? -github-repo]
                  :task (let [path (str (fs/path (System/getenv "HOME") "code" "repo" "atomfiles"))]
                          (when-not (-exists? path)
                            (shell (format "git clone %s %s"
                                           (-github-repo "cldwalker/atomfiles")
                                           path))
                            ;; TODO: Address swackets
                            (shell {:dir path} "apm install --packages-file my-packages.txt")
                            (shell (format "ln -s %s ~/.atom" path))))}

  bb-clis-repo {:doc "Install cldwalker/bb-clis"
                :depends [-exists? -github-repo]
                :task (let [path (fs/path (System/getenv "HOME") "code" "repo" "bb-clis")]
                        (when-not (-exists? path)
                          (shell (format "git clone %s %s"
                                         (-github-repo "cldwalker/bb-clis")
                                         path))))}

  dotfiles-repo {:doc "Install cldwalker/dotfiles"
                 :depends [-exists? -github-repo]
                 :task (let [path (str (fs/path (System/getenv "HOME") "code" "repo" "dotfiles"))]
                         (when-not (-exists? path)
                           (shell (format "git clone %s %s"
                                          (-github-repo "cldwalker/dotfiles")
                                          path))
                           (shell {:dir path} "ruby install.rb")))}

  irbfiles-repo {:doc "Install cldwalker/irbfiles"
                 :depends [-exists? -github-repo]
                 :task (let [path (str (fs/path (System/getenv "HOME") "code" "repo" "irbfiles"))]
                         (when-not (-exists? path)
                           (shell (format "git clone %s %s"
                                          (-github-repo "cldwalker/irbfiles")
                                          path))
                           (shell {:dir path} "bundle install --system")
                           (shell {:dir path} "ruby install.rb")))}

  vimfiles-repo {:doc "Install cldwalker/vimfiles"
                 :depends [-exists? -github-repo]
                 :task (let [path (str (fs/path (System/getenv "HOME") "code" "repo" "vimfiles"))]
                         (when-not (-exists? path)
                           (shell (format "git clone %s %s"
                                          (-github-repo "cldwalker/vimfiles")
                                          path))
                           (shell {:dir path} "rake install")))}

  setup {:doc "Sets up all repositories for osx"
         :depends [keyboard-repo dotfiles-repo bb-clis-repo atomfiles-repo
                   irbfiles-repo vimfiles-repo]}}}
